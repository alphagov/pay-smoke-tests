name: Post merge

on:
  push:
    branches:
      - main

concurrency: smoke-tests-post-merge

jobs:
  test-and-build:
    uses: ./.github/workflows/run-tests.yml

  release:
    needs: test-and-build
    permissions:
      contents: write
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve Build Assets
        uses: actions/cache@136d96b4aee02b1f0de3ba493b1d47135042d9c0
        env:
          cache-name: cache-build-dist
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
      - name: Get Next Version Number
        id: next-version
        uses: actions/github-script@9ac08808f993958e9de277fe43a64532a609130e
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var currentReleaseName = ""
            try {
              const getReleaseResp = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              })
              currentReleaseName = getReleaseResp.data.name
              console.log(`Current Release Name: ${currentReleaseName}`)

              var currentReleaseNumberStr = currentReleaseName.replace(/\D/g, '')
              var currentReleaseNumberParseInt = parseInt(currentReleaseNumberStr)
              var currentReleaseNumber = isNaN(currentReleaseNumberParseInt) ? 0 : currentReleaseNumberParseInt

              var nextRelease = "v" + (currentReleaseNumber + 1)
              console.log(`Next Release Version: ${nextRelease}`)
              console.log(`::set-output name=NEXTVERSION::${nextRelease}`)
            } catch(err) {
              if (err.name == 'HttpError') {
                console.warn("Found HttpError")
                if (err.status == 404)  {
                  console.error("Error 404: No previous GitHub Releases found.")
                  throw err
                }
              } else {
                console.error(`Failed to get the latest release: ${err.message}`)
                throw err
              }
            }
      - name: Create .zip Archive
        id: create-zip
        env:
          NEXTVERSION: ${{ steps.next-version.outputs.NEXTVERSION }}
        run: |
          ZIPFILENAME="pay-smoke-tests-${NEXTVERSION}"
          zip -j -r $ZIPFILENAME.zip dist/zip/*

          echo "::set-output name=ZIPFILENAME::${ZIPFILENAME}"
      - name: Upload Archive
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
        with:
          name: ${{ steps.create-zip.outputs.ZIPFILENAME }}
          path: ${{ steps.create-zip.outputs.ZIPFILENAME }}.zip
          if-no-files-found: error
      - name: Create Release
        if: ${{ github.ref == 'refs/heads/main' }}
        id: create-release
        uses: actions/github-script@9ac08808f993958e9de277fe43a64532a609130e
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs')
            try {
              const releaseResponse = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: "${{ steps.next-version.outputs.NEXTVERSION }}",
                name: "${{ steps.next-version.outputs.NEXTVERSION }}"
              })

              const fileName = "${{ steps.create-zip.outputs.ZIPFILENAME }}.zip"

              const releaseUploadResponse = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseResponse.data.id,
                name: fileName,
                data: fs.readFileSync(fileName)
              })
            } catch(err) {
              console.error(`Failed to create release: ${err.message}`)
              throw err
            }