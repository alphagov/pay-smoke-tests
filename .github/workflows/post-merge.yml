name: Post merge

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

concurrency: smoke-tests-post-merge

jobs:
  test-and-build:
    uses: ./.github/workflows/run-tests.yml

  release:
    needs: test-and-build
    permissions:
      contents: write
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 0
      - name: Retrieve Build Assets
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a  # v4.1.2
        env:
          cache-name: cache-build-dist
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
      - name: Parse Version Number
        id: next-version
        run: |
          cd ${GITHUB_WORKSPACE}
          LATEST_RELEASE_NUMBER=$(git describe --abbrev=0 --tags --match "v*" | cut -d "v" -f 2 || true)
          number_regex='^[0-9]+$'
          if ! [[ ${LATEST_RELEASE_NUMBER} =~ $number_regex ]]; then
           LATEST_RELEASE_NUMBER=0
          fi
          NEW_RELEASE_NUMBER=$((LATEST_RELEASE_NUMBER + 1))
          echo "NEXTVERSION=v${NEW_RELEASE_NUMBER}" >> $GITHUB_OUTPUT
      - name: Create .zip Archive
        id: create-zip
        run: |
          ZIPFILENAME="pay-smoke-tests-${{ steps.next-version.outputs.NEXTVERSION }}"
          zip -j -r $ZIPFILENAME.zip dist/zip/*

          echo "ZIPFILENAME=${ZIPFILENAME}" >> $GITHUB_OUTPUT
          
      - name: Upload Archive
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882  # v4.4.3
        with:
          name: ${{ steps.create-zip.outputs.ZIPFILENAME }}
          path: ${{ steps.create-zip.outputs.ZIPFILENAME }}.zip
          if-no-files-found: error
      - name: Create Release
        if: ${{ github.ref == 'refs/heads/main' }}
        id: create-release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs')
            try {
              const releaseResponse = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: "${{ steps.next-version.outputs.NEXTVERSION }}",
                name: "${{ steps.next-version.outputs.NEXTVERSION }}"
              })

              const fileName = "${{ steps.create-zip.outputs.ZIPFILENAME }}.zip"

              const releaseUploadResponse = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseResponse.data.id,
                name: fileName,
                data: fs.readFileSync(fileName)
              })
            } catch(err) {
              console.error(`Failed to create release: ${err.message}`)
              throw err
            }